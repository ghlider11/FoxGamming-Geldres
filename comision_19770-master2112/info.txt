JSX : Es una extension de JS que permite crear componentes de forma sencilla parecida a HTML

COMPONENTES : Una funcion que siempre tiene un solo retorno , ya que su funcion principal es dibujar un elemento en pantalla y todos arrancan en mayuscula. 


- Props : Son parametros de una funcion
- State : Son variables internas de un componente que si las modifico el componente se actualiza
- Ciclo de vida
- Metodos de ciclo de vida


mount
-constructor
-render
-componentDidMount

update
-render
-shouldComponentUpdate

unmount
-componentWillUnmount






HOOKS : Son funciones .

- useState : 

        useState() : Nos permite tener un estado en un componente 
            - Retorna un array con dos elementos
            - El primer elemento es el valor de la variable
            - El segundo elemento es una funcion que modifica el valor de la variable


        useEffect() : Hace un efecto secundario por defecto siempre despues de cada render

        useEffect(()=>{},[]) 




setTimeout(()=>{
    
},2000)



function foo(a){

}




foo(1)






class App extends React.Component{

    constuctor(){
        super()
        this.state = {
            usuarios : [],
            contador : 0,
            toggle : false
        }
    }

    componentDidMount(){

    }

    render(){
        return (
            <header>
                {this.props.nombre}
            </header>
        )
    }
}


const arr = [1,2,3,4,5]

//[2,3,4,5,6]

arr.map((elemento)=>{
    return elemento + 1
})


warning


comentarios






const arr = [1,2,3]

const [uno,dos,tres] = arr

const uno = arr[0]
const dos = arr[1]
const tres = arr[2]















const obj = {
    a:1,
    b:2,
    c:3
}

const {a,b,c} = obj

const {a:a,b:b,c:c} = obj

const a = obj.a
const b = obj.b
const c = obj.c




OBJECT PROPERTY SHORTHAND

const nombre = 'Juan'

const persona = {
    nombre : nombre
}

const persona = {
    nombre 
}






const isInitialMount = useRef(true);

useEffect(() => {
  if (isInitialMount.current) {
     isInitialMount.current = false;
  } else {
      // Your useEffect code here to be run on update
  }
});




const i = setInterval(()=>{
            console.log("Ping")
        },1000)

        return ()=>{
            //console.log("Cleanup")
            clearInterval(i)
        } 





        - contador 
        - sass
        - ciclo de vida



react-router

react-router-dom


    BrowserRouter : History API
    HashRouter : location.hash
    StaticRouter : SSR (Server Side Rendering)

react-router-native


Pub/Sub